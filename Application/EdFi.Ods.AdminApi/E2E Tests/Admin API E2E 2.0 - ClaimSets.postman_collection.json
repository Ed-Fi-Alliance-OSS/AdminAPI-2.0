{
	"info": {
		"_postman_id": "20da7bd3-c574-4bf7-94fa-5d75d684a4d1",
		"name": "Admin API E2E 2.0 - ClaimSets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3724147"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "ClaimSets",
					"item": [
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"ClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/claimSets/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response result includes claimSet key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedClaimSetId\", result.id);\r",
											"}\r",
											"\r",
											"const PostClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"read\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"create\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"update\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"delete\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"id\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"displayName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"isInheritedFromParent\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"id\",\r",
											"                    \"name\",\r",
											"                    \"displayName\",\r",
											"                    \"isInheritedFromParent\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"read\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"create\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"update\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"delete\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"object\",\r",
											"                          \"properties\": {\r",
											"                            \"id\": {\r",
											"                              \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"name\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"displayName\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"isInheritedFromParent\": {\r",
											"                              \"type\": \"boolean\"\r",
											"                            }\r",
											"                          },\r",
											"                          \"required\": [\r",
											"                            \"id\",\r",
											"                            \"name\",\r",
											"                            \"displayName\",\r",
											"                            \"isInheritedFromParent\"\r",
											"                          ]\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"authorizationStrategyOverridesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"children\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": {}\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"name\",\r",
											"                    \"read\",\r",
											"                    \"create\",\r",
											"                    \"update\",\r",
											"                    \"delete\",\r",
											"                    \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"                    \"authorizationStrategyOverridesForCRUD\",\r",
											"                    \"children\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"read\",\r",
											"            \"create\",\r",
											"            \"update\",\r",
											"            \"delete\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"POST ClaimSets: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PostClaimSetsSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test ClaimSet {{ClaimSetGUID}}\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"_defaultAuthorizationStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"_defaultAuthorizationStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"_defaultAuthorizationStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Json: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Resource Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Resource Name: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Name: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Name: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Name: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(2);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"learningStandard-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[1]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ClaimSet-WithWrongResource\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards-123\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard-123\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wrong-Parent-Child-Relation\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Resource Duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'learningStandard'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Resource-Duplication\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          },\r\n\t\t  {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        ""
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": {\r\n    \"create\": true,\r\n    \"read\": true,\r\n    \"update\": true,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(2);\r",
											"    pm.expect(response.errors.ResourceClaims[0]).to.contain(\"which is not in the system\");\r",
											"    pm.expect(response.errors.ResourceClaims[1]).to.contain(\"have at least one action\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4000,\r\n  \"resourceClaimActions\": {\r\n    \"create\": false,\r\n    \"read\": false,\r\n    \"update\": false,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": {\r\n    \"create\": true,\r\n    \"read\": true,\r\n    \"update\": false,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "4"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action ClaimSet not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction Not Found: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction Not Found: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": {\r\n    \"create\": true,\r\n    \"read\": true,\r\n    \"update\": false,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/90000/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "90000",
                        "resourceClaimActions",
                        "4"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"create\",\r\n  \"authorizationStrategyName\": \"RelationshipsWithStudentsOnly\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "4",
                        "overrideAuthorizationStrategy"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaim.length).to.equal(1);\r",
											"    pm.expect(response.errors.ResourceClaim[0]).to.contain(\"doesn't exist\");\r",
											"    pm.expect(response.errors.AuthorizationStrategyName.length).to.equal(1);\r",
											"    pm.expect(response.errors.AuthorizationStrategyName[0]).to.contain(\"doesn't exist\");\r",
											"    pm.expect(response.errors.ActionName.length).to.equal(1);\r",
											"    pm.expect(response.errors.ActionName[0]).to.contain(\"doesn't exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"NotExist\",\r\n  \"authorizationStrategyName\": \"RelationshipsWithStudentsOnlys\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4000/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "4000",
                        "overrideAuthorizationStrategy"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Authorization Strategies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthorizationStrategies: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4/resetAuthorizationStrategies",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "4",
                        "resetAuthorizationStrategies"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Authorization Strategies Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthorizationStrategies: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/40000/resetAuthorizationStrategies",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "40000",
                        "resetAuthorizationStrategies"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "4"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4000",
									"host": [
										"{{API_URL}}"
									],
                    "path": [
                        "v2",
                        "claimSets",
                        "{{CreatedClaimSetId}}",
                        "resourceClaimActions",
                        "4000"
                    ]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy- Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": [{\r",
											"        \"name\": \"educationStandards\",\r",
											"        \"read\": true,\r",
											"        \"create\": true,\r",
											"        \"update\": true,\r",
											"        \"delete\": true,\r",
											"        \"defaultAuthStrategiesForCRUD\": [\r",
											"          {\r",
											"            \"authStrategyName\": \"NamespaceBased\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          },\r",
											"          {\r",
											"            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          },\r",
											"          {\r",
											"            \"authStrategyName\": \"NamespaceBased\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          },\r",
											"          {\r",
											"            \"authStrategyName\": \"NamespaceBased\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          }\r",
											"        ],\r",
											"        \"authorizationStrategyOverridesForCRUD\": [\r",
											"          null,\r",
											"          null,\r",
											"          null,\r",
											"          null\r",
											"        ]\r",
											"    }]\r",
											"  })\r",
											" }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/claimSets/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response result claimset has expected name and resource claims\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"name\");\r",
											"    pm.expect(result.name).contains(\"Copied ClaimSet from\");\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const resourceclaimexists = result.resourceClaims.any(r => r.name === \"educationStandards\")\r",
											"    pm.expect(resourceclaimexists).to.equal(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Copied ClaimSet from {{OtherExistingClaimSetId}}\",\r\n    \"originalid\": {{OtherExistingClaimSetId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/copy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"copy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy- Invalid ClaimSet Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomIntFromInterval(min, max) { // min and max included \r",
											"  return Math.floor(Math.random() * (max - min + 1) + min)\r",
											"}\r",
											"\r",
											"const rndInt = randomIntFromInterval(450, 783)\r",
											"pm.collectionVariables.set(\"NotExistClaimSetId\", pm.variables.replaceIn(rndInt));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.title).to.contains(\"Not found\");\r",
											"    pm.expect(response.title).to.contains(\"claimset\");    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Claim set does not exists\",\r\n    \"originalid\": {{NotExistClaimSetId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/copy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"copy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfClaimSet = results.map(\r",
											"        function(claimSet) { return claimSet.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"\r",
											"    const result = results[indexOfClaimSet];\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"});\r",
											"\r",
											"const GetClaimSetsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"_isSystemReserved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"_applications\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"_isSystemReserved\",\r",
											"        \"_applications\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSetsId: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSetsId: Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(claimSetId);\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === \"educationStandards\")\r",
											"    pm.expect(educationStandardsResourceClaim).to.be.an(\"object\", \"The educationStandards resource claim was not found.\")\r",
											"    const academicSubjectDescriptorResourceClaim = result.resourceClaims.find(r => r.name === \"academicSubjectDescriptor\")\r",
											"    pm.expect(academicSubjectDescriptorResourceClaim).to.be.an(\"object\", \"The academicSubjectDescriptor resource claim was not found.\")\r",
											"});\r",
											"\r",
											"const GetClaimSetsIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"read\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"create\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"update\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"delete\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"id\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"displayName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"isInheritedFromParent\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"id\",\r",
											"                    \"name\",\r",
											"                    \"displayName\",\r",
											"                    \"isInheritedFromParent\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"read\",\r",
											"            \"create\",\r",
											"            \"update\",\r",
											"            \"delete\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSetId: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets: Response result includes updated claimset\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Updated Test ClaimSet\");\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === \"educationStandards\")\r",
											"    pm.expect(educationStandardsResourceClaim).to.be.an(\"object\", \"The educationStandards resource claim was not found.\")\r",
											"    const academicSubjectDescriptorResourceClaim = result.resourceClaims.any(r => r.name === \"academicSubjectDescriptor\")\r",
											"    pm.expect(academicSubjectDescriptorResourceClaim).to.equal(false);\r",
											"});\r",
											"\r",
											"const PutClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"read\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"create\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"update\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"delete\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"id\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"displayName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"isInheritedFromParent\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"id\",\r",
											"                    \"name\",\r",
											"                    \"displayName\",\r",
											"                    \"isInheritedFromParent\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"read\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"create\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"update\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"delete\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"object\",\r",
											"                          \"properties\": {\r",
											"                            \"id\": {\r",
											"                              \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"name\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"displayName\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"isInheritedFromParent\": {\r",
											"                              \"type\": \"boolean\"\r",
											"                            }\r",
											"                          },\r",
											"                          \"required\": [\r",
											"                            \"id\",\r",
											"                            \"name\",\r",
											"                            \"displayName\",\r",
											"                            \"isInheritedFromParent\"\r",
											"                          ]\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"authorizationStrategyOverridesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"children\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": {}\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"name\",\r",
											"                    \"read\",\r",
											"                    \"create\",\r",
											"                    \"update\",\r",
											"                    \"delete\",\r",
											"                    \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"                    \"authorizationStrategyOverridesForCRUD\",\r",
											"                    \"children\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"read\",\r",
											"            \"create\",\r",
											"            \"update\",\r",
											"            \"delete\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"PUT ClaimSets: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Updated Test ClaimSet\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      }      \r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Json: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Resource Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(2);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"learningStandard-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[1]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"ClaimSet-WithWrongResource\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards-123\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard-123\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Wrong-Parent-Child-Relation\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Resource Duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'learningStandard'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Resource-Duplication\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          },\r\n\t\t  {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authorizationStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{SystemReservedClaimSetId}},\r\n    \"name\": \"Update System Reserved ClaimSet\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE ClaimSets: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"claimset\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSets System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"SystemReservedClaimSetId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - With Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSets With Application: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"Cannot delete\", \"associated application\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"OtherApplicationId\");\r",
											"pm.collectionVariables.unset(\"OtherApplicationVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Other Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Other Application User\",\r",
											"      \"contactEmailAddress\": \"otherapplication@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (vendorErr, vendorResponse) {\r",
											"  if(vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }\r",
											"  const vendorJson = vendorResponse.json();\r",
											"  if(!vendorJson.id) { console.log('Error in Pre-request: vendorID missing from response. Response is:', vendorJson); }\r",
											"  pm.collectionVariables.set(\"OtherApplicationVendorId\", vendorJson.id);\r",
											"\r",
											"\r",
											"  pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v2/applications`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",\r",
											"        \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw:JSON.stringify({\r",
											"        \"applicationName\": \"Other Vendor Application\",\r",
											"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"        \"claimSetName\": \"Ed-Fi Sandbox\",\r",
											"        \"profileIds\": [],\r",
											"        \"educationOrganizationIds\": [ 255901 ],\r",
											"        \"odsInstanceId\": 1\r",
											"      }),\r",
											"    }\r",
											"  },  \r",
											"  function (appErr, appResonse) {\r",
											"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"    const appNotJson = appResonse.json();\r",
											"    if(!appNotJson.id) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }\r",
											"    else {\r",
											"      pm.collectionVariables.set(\"OtherApplicationId\", appNotJson.id);\r",
											"    }\r",
											"  \r",
											"\r",
											"\r",
											"  pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v2/applications/${pm.collectionVariables.get(\"OtherApplicationId\")}`,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",\r",
											"        \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw:JSON.stringify({\r",
											"        \"applicationName\": \"ClaimSet Test Vendor Application\",\r",
											"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"        \"claimSetName\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"        \"profileIds\": [],\r",
											"        \"educationOrganizationIds\": [ 255901 ],\r",
											"        \"odsInstanceId\": 1\r",
											"      }),\r",
											"    }\r",
											"  },  \r",
											"  function (appErr, appResonse) {\r",
											"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"    const appJson = appResonse.json();\r",
											"    if(!appJson.id) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }\r",
											"}); \r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{OtherExistingClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{OtherExistingClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSet NotFound: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSet NotFound: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Edited-ClaimSet\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedClaimSetId\");\r",
											"pm.collectionVariables.unset(\"OtherExistingClaimSetId\");\r",
											"pm.collectionVariables.unset(\"ClaimSetGUID\");\r",
											"pm.collectionVariables.unset(\"OtherClaimSetGUID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: guid },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: guid },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "NotExistClaimSetId",
			"value": ""
		},
		{
			"key": "RegisteredClientId",
			"value": ""
		},
		{
			"key": "RegisteredClientSecret",
			"value": ""
		}
	]
}
